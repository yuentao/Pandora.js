"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// MIT License

// Copyright (c) 2014-2020 Pandora.js

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

//兼容处理&&基础方法
(function () {
  //获取CSS变量
  var getRoot = function getRoot(name) {
    return getComputedStyle(document.documentElement).getPropertyValue("--" + name);
  };
  //requestAnimationFrame
  var lastTime = 0,
      vendors = ["webkit", "moz"];
  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
    window.requestAnimationFrame = window[vendors[x] + "RequestAnimationFrame"];
    window.cancelAnimationFrame = window[vendors[x] + "CancelAnimationFrame"] || window[vendors[x] + "CancelRequestAnimationFrame"];
  }

  if (!window.requestAnimationFrame) {
    window.requestAnimationFrame = function (callback) {
      var currTime = new Date().getTime(),
          timeToCall = Math.max(0, 16 - (currTime - lastTime)),
          id = window.setTimeout(function () {
        callback(currTime + timeToCall);
      }, timeToCall);
      lastTime = currTime + timeToCall;
      return id;
    };
  }

  if (!window.cancelAnimationFrame) {
    window.cancelAnimationFrame = function (id) {
      clearTimeout(id);
    };
  }

  var rootText = "";
  if (!getRoot("alertTheme")) rootText += "/*alert背景*/--alertTheme:rgba(0, 0, 0,.45);";
  if (!getRoot("alertBg")) rootText += "/*alert遮罩*/--alertBg:rgba(0, 0, 0,.45);";
  if (!getRoot("alertFontSize")) rootText += "/*alert字体大小*/--alertFontSize:1rem;";
  if (!getRoot("alertColor")) rootText += "/*alert字体颜色*/--alertColor:#fff;";

  if (!getRoot("confirmTheme")) rootText += "/*confirm背景*/--confirmTheme:rgb(255, 255, 255);";
  if (!getRoot("confirmBg")) rootText += "/*confirm遮罩*/--confirmBg:rgba(0, 0, 0,.45);";
  if (!getRoot("confirmBtnBg")) rootText += "/*confirm按钮背景*/--confirmBtnBg:rgb(0,0,0);";
  if (!getRoot("confirmFontSize")) rootText += "/*confirm字体大小*/--confirmFontSize:1rem;";
  if (!getRoot("confirmColor")) rootText += "/*confirm字体颜色*/--confirmColor:#000;";
  if (!getRoot("confirmBtnColor")) rootText += "/*confirm按钮字体颜色*/--confirmBtnColor:#fff;";

  //CSS支持度判断
  var style = document.createElement("style"),
      styleText = "/*\u5224\u65AD\u662F\u5426\u652F\u6301hover*/@media (any-hover: none){body::before{content: 'unsupport';display:none;}}/*\u5224\u65AD\u662F\u5426\u652F\u6301CSS\u53D8\u91CF*/:root{--CSS:'support';" + rootText + "}";
  style.id = "PDStyleChecker";
  style.innerHTML = styleText;
  document.querySelector("head").append(style);

  //美化原生alert
  window.alert = function (content) {
    var mask = document.createElement("div"),
        maskBg = getRoot("alertBg"),
        div = document.createElement("div"),
        timeout = void 0,
        Theme = getRoot("alertTheme"),
        fontSize = getRoot("alertFontSize"),
        color = getRoot("alertColor");

    mask.style.cssText = "\n      position: fixed;\n      top: 0;\n      left: 0;\n      z-index: 99999;\n      width: 100%;\n      height: 100%;\n      display:flex;\n      justify-content:center;\n      align-items: flex-end;\n      background: " + maskBg + ";";

    div.style.cssText = "\n      background:" + Theme + ";\n      text-align: center;\n      color: " + color + ";\n      font-size: " + fontSize + ";\n      padding: 1em 2em;\n      line-height: 1.5;\n      transition: opacity .4s ease-out;\n      margin-bottom:5vh;";

    div.innerHTML = content;
    mask.appendChild(div);
    document.body.appendChild(mask);

    mask.onclick = function () {
      clearTimeout(timeout);
      document.body.removeChild(mask);
      mask = null;
      div = null;
      timeout = null;
      color = null;
    };

    clearTimeout(timeout);
    timeout = setTimeout(function () {
      div.style.opacity = 0;
      div.addEventListener("transitionend", function () {
        document.body.removeChild(mask);
        mask = null;
        div = null;
        timeout = null;
        color = null;
      });
    }, 800);
    return !1;
  };
  window.confirm = function (config) {
    var content = config.content,
        confirmText = config.confirmText,
        cancelText = config.cancelText,
        success = config.success,
        fail = config.fail;

    var mask = document.createElement("div"),
        maskBg = getRoot("confirmBg"),
        btnBg = getRoot("confirmBtnBg"),
        div = document.createElement("div"),
        msg = document.createElement("p"),
        Theme = getRoot("confirmTheme"),
        fontSize = getRoot("confirmFontSize"),
        color = getRoot("confirmColor"),
        btnColor = getRoot("confirmBtnColor"),
        confirm = document.createElement("button"),
        cancel = document.createElement("button");

    mask.style.cssText = "\n    position: fixed;\n    top: 0;\n    left: 0;\n    z-index: 99999;\n    width: 100%;\n    height: 100%;\n    display:flex;\n    justify-content:center;\n    align-items: center;\n    background: " + maskBg + ";";

    div.style.cssText = "\n    background:" + Theme + ";\n    text-align: center;\n    color: " + color + ";\n    font-size: " + fontSize + ";\n    padding: 1.5em;\n    box-shadow: 0 0 10px rgba(0,0,0,.2);";

    msg.style.cssText = "margin:0";
    var buttonCSS = "margin: 4em 1em 0 1em;font-size: .8em;appearance: none;background: " + btnBg + ";color: " + btnColor + ";border: none;padding: 1em 3em;cursor: pointer;outline: none;";
    confirm.style.cssText = buttonCSS;
    cancel.style.cssText = buttonCSS;

    msg.innerHTML = content;
    div.appendChild(msg);
    confirm.innerText = confirmText ? confirmText : "确认";
    cancel.innerText = cancelText ? cancelText : "取消";

    var removeConfirm = function removeConfirm() {
      document.body.removeChild(mask);
    };
    confirm.onclick = function () {
      removeConfirm();
      success && success();
    };
    cancel.onclick = function () {
      removeConfirm();
      fail && fail();
    };

    div.appendChild(confirm);
    div.appendChild(cancel);
    mask.appendChild(div);
    document.body.appendChild(mask);
  };
  //显示loading遮罩
  window.showLoading = function () {
    var mask = document.createElement("div");
    var svg = new Image();
    svg.src = "https://b.pandorajs.com/Pandora/src/loader.svg";
    mask.id = "Pd-upload-Mask";
    mask.appendChild(svg);
    document.body.appendChild(mask);
    document.querySelector("#Pd-upload-Mask").style.cssText = "width:100%;height:100%;position: fixed;z-index: 99;top: 0;left: 0;background:rgba(0,0,0,.65);display:flex;align-items: center; justify-content: center;";
  };
  window.hideLoading = function () {
    document.body.removeChild(document.querySelector("#Pd-upload-Mask"));
  };
})();
//内置方法
var PandoraAPI = function PandoraAPI() {
  var _this = this;

  var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "html";

  _classCallCheck(this, PandoraAPI);

  this.element = element;
  this.getEle = function (ele) {
    var typeArr = ["[object Window]", "[object HTMLDocument]"];
    if (typeArr.includes(ele + "")) return window;
    if (document.querySelectorAll(ele).length > 1) {
      return document.querySelectorAll(ele);
    } else {
      return document.querySelector(ele);
    }
  };
  this.init = function () {
    var ele = _this.getEle(element);
    try {
      ele.eventList = [];
      return ele;
    } catch (err) {
      console.error("DOM\u4E2D\u4E0D\u5B58\u5728\u540D\u79F0\u4E3A " + _this.element + " \u7684\u5143\u7D20");
    }
  };
  this.get = this.init();
  //生产PandoraId
  this.pid = "PandoraAPI_" + new Date().getTime();
  //默认参数赋值
  this.extend = function (config, options) {
    if (!options) {
      options = config;
    } else {
      Object.keys(config).forEach(function (e) {
        if (typeof options[e] === "undefined") options[e] = config[e];
      });
    }
    return options;
  };
  //选择指定下标元素
  this.eq = function (index) {
    _this.get = _this.getEle(element)[index];
    var ele = _this.get;
    ele.eventList = [];
    return _this;
  };
  //选择子级元素
  this.child = function (name) {
    var ele = _this.get;
    if (ele.querySelectorAll(name).length > 1) {
      _this.get = ele.querySelectorAll(name);
    } else {
      _this.get = ele.querySelector(name);
    }
    var children = _this.get;
    children.eventList = [];
    return _this;
  };
  //选择父级元素
  this.parent = function () {
    var ele = _this.get;
    _this.get = ele.parentElement;
    return _this;
  };
  //遍历元素集
  this.each = function (fn) {
    var ele = _this.get;
    var i = 0;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = ele[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var a = _step.value;

        fn(a, i);
        i++;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return _this;
  };
  //获取或修改样式
  this.css = function (name) {
    var ele = _this.get;
    var style = [];
    style = name;
    if (style) {
      if (typeof style === "string") {
        return window.getComputedStyle(ele).getPropertyValue(style);
      } else {
        Object.keys(style).forEach(function (e) {
          ele.style[e] = style[e];
        });
      }
    }
    return _this;
  };
  //获取或插入文本
  this.text = function (str) {
    var ele = _this.get;
    if (str) {
      ele.innerText = str;
    } else {
      return ele.innerText;
    }
    return _this;
  };
  //获取或插入HTML
  this.html = function (content) {
    var ele = _this.get;
    if (content) {
      _this.empty();
      ele.innerHTML = content;
    } else {
      return ele.innerHTML;
    }
    return _this;
  };
  //获取或插入值
  this.val = function () {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    var ele = _this.get;
    if (value !== null) ele.value = value;
    return ele.value;
  };
  //插入元素
  this.prepend = function (target) {
    var ele = _this.get;
    var Thetarget = "" + target + ele.innerHTML;
    ele.innerHTML = Thetarget;
    return _this;
  };
  this.append = function (target) {
    var ele = _this.get;
    var Thetarget = "" + ele.innerHTML + target;
    ele.innerHTML = Thetarget;
    return _this;
  };
  //清空容器
  this.empty = function () {
    var ele = _this.get;
    while (ele.firstChild) {
      ele.removeChild(ele.firstChild);
    }
    return _this;
  };
  //移除元素
  this.remove = function () {
    var ele = _this.get;
    ele.parentElement.removeChild(ele);
    return _this;
  };
  //添加class
  this.addClass = function (name) {
    var ele = _this.get;
    var beforeClass = ele.classList.value;
    if (beforeClass) {
      ele.className = beforeClass + " " + name.trim();
    } else {
      ele.className = name.trim();
    }
    return _this;
  };
  //移除class
  this.removeClass = function (name) {
    var ele = _this.get;
    var removeThat = function removeThat(ele) {
      var beforeClass = ele.classList.value.split(" "),
          afterClass = void 0;
      beforeClass.map(function (cur, idx) {
        if (cur === name) beforeClass.splice(idx, 1);
      });
      afterClass = beforeClass.join(" ");
      ele.className = afterClass;
    };
    if (ele.length) {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = ele[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var e = _step2.value;
          removeThat(e);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    } else {
      removeThat(ele);
    }
    return _this;
  };
  //是否拥有class名
  this.hasClass = function (name) {
    var ele = _this.get;
    var classlist = ele.classList.value.split(" ");
    if (classlist.indexOf(name) > 0) {
      return !0;
    } else {
      return !1;
    }
  };
  //添加属性
  this.attr = function (name) {
    var val = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    var ele = _this.get;
    if (val) {
      ele.setAttribute(name, val);
      return _this;
    } else {
      return ele.getAttribute(name);
    }
  };
  //移除属性
  this.removeAttr = function (name) {
    var ele = _this.get;
    ele.removeAttribute(name);
    return _this;
  };
  //绑定事件
  this.bind = function (eventName, fn) {
    var bool = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !1;

    var ele = _this.get;
    ele.addEventListener(eventName, fn, bool);
    ele.eventList.push({ name: eventName, callback: fn });
    return _this;
  };
  //解绑事件
  this.unbind = function (eventName) {
    var ele = _this.get;
    ele.eventList.map(function (e, i) {
      if (e.name === eventName) {
        ele.removeEventListener(eventName, e.callback);
        ele.eventList.splice(i, 1);
      }
    });
    return _this;
  };
  //添加事件
  this.addEvent = function (eventName, fn) {
    var ele = _this.get;
    var addEvent = function addEvent(ele) {
      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      ele[eventName] = function (e) {
        var event = e;
        event.current = ele;
        fn(event, index);
      };
    };
    if (ele.length) {
      var index = 0;
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = ele[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var e = _step3.value;

          addEvent(e, index);
          index++;
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    } else {
      addEvent(ele);
    }
  };
  //点击事件
  this.click = function (fn) {
    _this.addEvent("onclick", fn);
    return _this;
  };
  //长按事件
  this.taping = function (fn) {
    var ele = _this.get;
    try {
      window.ontouchstart;
    } catch (err) {
      ele.onclick = fn;
      return _this;
    }
    var infiniteFrame = void 0;
    var infiniteFn = function infiniteFn() {
      fn();
      infiniteFrame = requestAnimationFrame(infiniteFn);
    };
    ele.ontouchstart = function () {
      event.preventDefault();
      cancelAnimationFrame(infiniteFn);
      infiniteFn();
    };
    ele.ontouchend = function () {
      cancelAnimationFrame(infiniteFrame);
      return _this;
    };
  };
  //失焦事件
  this.blur = function (fn) {
    var ele = _this.get;
    ele.onblur = fn;
    return _this;
  };
  //聚焦事件
  this.focus = function (fn) {
    _this.addEvent("onfocus", fn);
    return _this;
  };
  //改变事件
  this.change = function (fn) {
    _this.addEvent("onchange", fn);
    return _this;
  };
  //输入事件
  this.input = function (fn) {
    _this.addEvent("oninput", fn);
    return _this;
  };
  //悬浮事件
  this.hover = function (In, Out) {
    var ele = _this.get;
    ele.onmouseover = In;
    Out && (ele.onmouseout = Out);
    return _this;
  };
  //滚动事件
  this.scroll = function (fn) {
    var ele = _this.get;
    ele.onscroll = fn;
    return _this;
  };
  //过渡结束事件
  this.ontransition = function (fn) {
    var ele = _this.get;
    try {
      window.ontransitionend;
    } catch (err) {
      return !1;
    }
    ele.addEventListener("transitionend", fn);
    return _this;
  };
  //动画结束事件
  this.animated = function (fn) {
    var ele = _this.get;
    var isAnimated = !1;
    ele.addEventListener("animationend", function () {
      if (!isAnimated) {
        isAnimated = !0;
        fn();
      }
    });
    return _this;
  };
  //显示
  this.show = function () {
    var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    if (_this.attr("beforeHide")) {
      _this.css({ display: _this.attr("beforeHide") });
    } else {
      _this.css({ display: "block" });
    }
    callback && setTimeout(callback, 0);
    return _this;
  };
  //隐藏
  this.hide = function () {
    var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    if (!_this.attr("beforeHide")) _this.attr("beforeHide", _this.css("display"));
    _this.css({ display: "none" });
    callback && setTimeout(callback, 0);
    return _this;
  };
  //ajax
  this.ajax = function (options) {
    var config = {
      //接口地址(类型：字符串)
      url: null,
      //请求类型(类型：字符串；可选参数：post、get)
      type: "get",
      //是否同步请求(类型：布尔)
      async: !1,
      //发送数据类型(类型：字符串；可选参数：json、form)
      dataType: "json",
      //发送数据(类型：json或form；格式必须和发送数据类型保持一致)
      data: null,
      //成功回调方法(类型：方法；返回类型：对象)
      success: null,
      //失败回调方法(类型：方法)
      error: null
    };
    config = _this.extend(config, options);
    var http = new XMLHttpRequest();
    var params = void 0;
    if (config.dataType == "json") {
      if (config.data) params = Object.keys(config.data).map(function (key) {
        return encodeURIComponent(key) + "=" + encodeURIComponent(config.data[key]);
      }).join("&");
    } else {
      params = config.data;
    }

    http.onload = function () {
      if (http.status === 200 || http.statusText === "OK" || http.readyState === 4) {
        var res = http.response;
        try {
          JSON.parse(res);
        } catch (err) {
          config.success && config.success(res);
          return !1;
        }
        config.success && config.success(JSON.parse(res));
      }
    };
    http.onerror = config.error ? config.error : null;
    http.open(config.type.toUpperCase(), config.url, config.async);
    if (config.dataType == "json") http.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    http.send(params);
  };
  //fetch
  this.fetch = function (options) {
    var config = {
      //接口地址(类型：字符串)
      url: null,
      //请求类型(类型：字符串；可选参数：post、get、put)
      type: "get",
      //发送数据(类型：JSON或FormData；格式必须和请求类型相对应)
      data: null,
      //成功回调方法(类型：方法；返回类型：对象)
      success: null,
      //失败回调方法(类型：方法)
      error: null
    };
    config = _this.extend(config, options);
    var params = void 0;
    if (config.dataType == "json") {
      config.data && (params = JSON.stringify(config.data));
    } else {
      params = config.data;
    }

    fetch(config.url, { body: params, method: config.type.toLocaleUpperCase() }).then(function (res) {
      if (res.ok) return res.json();
    }).then(function (success) {
      config.success && config.success(success);
    }).catch(function (error) {
      config.error && config.error(error);
    });
  };
  //全局变量
  this.globalData = {};
  //设置全局变量
  this.setData = function (obj) {
    return new Promise(function (success, fail) {
      try {
        for (var key in obj) {
          _this.globalData[key] = obj[key];
        }success();
      } catch (err) {
        fail(err);
      }
    });
  };
  //模板渲染
  this.template = function (route, container) {
    return new Promise(function (success, fail) {
      var temp = function () {
        var cur = void 0;
        document.querySelectorAll("template").forEach(function (e) {
          if (e.getAttribute("route") == route) cur = e;
        });
        return cur;
      }();

      if (temp) {
        _this.empty();
        container.appendChild(document.importNode(temp.content, !0));
        success();
      } else {
        console.error("\u4E0D\u5B58\u5728\u4EE5\u4E0B\u6A21\u677F\u5757\uFF1A" + route);
        fail();
      }
    });
  };
};
//拓展方法
var PandoraJs = function PandoraJs() {
  var SuperClass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

  SuperClass = SuperClass || function Empty() {
    _classCallCheck(this, Empty);
  };
  return function (_SuperClass) {
    _inherits(_class, _SuperClass);

    function _class(element) {
      _classCallCheck(this, _class);

      return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, element));
    }
    //Mustache渲染


    _createClass(_class, [{
      key: "Mush",
      value: function Mush(options) {
        var _this3 = this;

        var config = {
          //渲染数据(类型：对象)
          data: null,
          //事件绑定(类型：方法)
          Bind: null,
          //生命周期-首次渲染完成(类型：方法；返回当前渲染数据)
          Init: null,
          // 生命周期-更新渲染完成(类型：方法)
          Updata: null
        };
        config = this.extend(config, options);
        var Html = this.html(),
            bHtml = Html,
            pattern = new RegExp("{{.*?}}", "g"),
            patterns = new RegExp("{{.*?}}"),
            matchValue = void 0;

        var result = function result() {
          var r = [];
          Html.match(pattern).forEach(function (e, index) {
            r[index] = e.split("{{")[1].split("}}")[0];
          });
          return r;
        };
        matchValue = result();

        //渲染html
        var renderHtml = function renderHtml() {
          return new Promise(function (next) {
            Html = bHtml;
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
              for (var _iterator4 = matchValue[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var value = _step4.value;

                for (var keyName in config.data) {
                  value === keyName && (Html = Html.replace(patterns, config.data[value] ? config.data[value] : ""));
                }
              }
            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4.return) {
                  _iterator4.return();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }

            _this3.html(Html);
            config.Bind && eval(config.Bind);
            next();
          });
        };

        //遍历变量是否被动态修改
        var unique = function unique(array) {
          var r = [];
          for (var i = 0, l = array.length; i < l; i++) {
            for (var j = i + 1; j < l; j++) {
              array[i] == array[j] && j == ++i;
            }r.push(array[i]);
          }
          return r;
        };

        var realVal = unique(matchValue);

        realVal.forEach(function (e) {
          Object.defineProperty(_this3.globalData, e, {
            set: function set(value) {
              config.data[e] = value;
              renderHtml();
              config.Updata && config.Updata();
            },
            get: function get() {
              return config.data[e];
            }
          });
        });

        renderHtml();
        config.Init && config.Init(this.globalData);
        return this;
      }
      //静态路由

    }, {
      key: "Router",
      value: function Router(options) {
        var config = {
          // 路由路径集合(类型：数组)
          routes: null
        };
        config = this.extend(config, options);
        var that = this;

        // 遍历路由路径
        var eachRoutes = function eachRoutes(path) {
          return new Promise(function (success, fail) {
            if (config.routes && path) {
              if (JSON.stringify(config.routes).indexOf(path) < 0) {
                fail("notPath");
              } else {
                config.routes.forEach(function (e) {
                  if (path == e.path) {
                    that.template(path, that.get).then(function () {
                      e.callback && e.callback();
                      success();
                    }).catch(function () {
                      e.error && e.error();
                    });
                  }
                });
              }
            }
          });
        };

        // HASH改变
        var hashChange = function hashChange() {
          var routePath = location.hash.split("#")[1];
          if (routePath) {
            eachRoutes(routePath);
          } else {
            eachRoutes("/");
          }
        };

        // 路由导航
        this.navigateTo = function (path) {
          return new Promise(function (success) {
            var fail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            eachRoutes(path).then(function () {
              window.location.href = "#" + path;
              success();
            }).catch(function () {
              console.error("路由地址不存在于routes！");
              fail && fail();
            });
          });
        };

        window.onload = hashChange;
        window.onhashchange = hashChange;
        return this;
      }
      //轮播切换

    }, {
      key: "Switcher",
      value: function Switcher(options) {
        var config = {
          //过渡速度/秒(类型：数字)
          Speed: 1,
          //动画曲线(类型：字符串；参考css3动画曲线)
          Curve: "ease",
          //切换效果(类型：字符串；可选参数：slider、fade)
          Effect: "slider",
          //方向(类型：字符串；可选参数：horizontal、vertical)
          Direction: "horizontal",
          //惯性回弹(类型：布尔)
          Inertia: true,
          //滑动比例(类型：数字)
          Distance: 3,
          //自动切换间隔/秒(类型：数字；为0时不自动切换)
          AutoSpeed: 0,
          //分页器(类型：布尔)
          Pagination: !1,
          //悬浮停止(类型：布尔)
          Hover: !1,
          //滚轮滚动(类型：布尔)
          Scroll: !1,
          //初始坐标(类型：数字)
          InitPage: 0,
          //循环(类型：布尔)
          Loop: !1,
          //切换状态变化(类型：方法)
          onChange: null
        };
        var that = this;
        config = that.extend(config, options);
        var childEle = this.get,
            parentEle = childEle[0].parentElement;
        var childW = childEle[0].offsetWidth,
            childH = childEle[0].offsetHeight,
            cur = config.InitPage,
            AutoTimeout = void 0,
            isScrolling = !1;
        var total = childEle.length,
            transitionend = function transitionend() {
          if (isScrolling) {
            isScrolling = !1;
            parentEle.removeEventListener("transitionend", transitionend);
          }
        };

        //切换
        var Swiper = function Swiper() {
          var moveTo = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

          moveTo && (cur = moveTo);
          Pagination(cur);
          config.onChange && config.onChange(cur);
          switch (config.Effect) {
            case "fade":
              var _iteratorNormalCompletion5 = true;
              var _didIteratorError5 = false;
              var _iteratorError5 = undefined;

              try {
                for (var _iterator5 = childEle[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                  var _cur = _step5.value;
                  _cur.style.opacity = 0;
                }
              } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion5 && _iterator5.return) {
                    _iterator5.return();
                  }
                } finally {
                  if (_didIteratorError5) {
                    throw _iteratorError5;
                  }
                }
              }

              childEle[cur].style.opacity = 1;
              break;
            default:
              switch (config.Direction) {
                case "horizontal":
                  parentEle.style.transform = "translate3d(" + -1 * (childW * cur) + "px,0,0)";
                  break;
                case "vertical":
                  parentEle.style.transform = "translate3d(0," + -1 * (childH * cur) + "px,0)";
                  break;
              }
              break;
          }
          if (config.Loop) {
            parentEle.addEventListener("transitionend", transitionend);
          } else {
            if (cur === 0 || cur === total - 1) {
              transitionend();
            } else {
              parentEle.addEventListener("transitionend", transitionend);
            }
          }
        };

        //分页器
        var Pagination = function Pagination(current) {
          var _iteratorNormalCompletion6 = true;
          var _didIteratorError6 = false;
          var _iteratorError6 = undefined;

          try {
            for (var _iterator6 = childEle[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
              var e = _step6.value;
              e.className = e.className.replace("active", "").trim();
            }
          } catch (err) {
            _didIteratorError6 = true;
            _iteratorError6 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion6 && _iterator6.return) {
                _iterator6.return();
              }
            } finally {
              if (_didIteratorError6) {
                throw _iteratorError6;
              }
            }
          }

          if (childEle[cur].className) {
            childEle[cur].className += " active";
          } else {
            childEle[cur].className += "active";
          }
          if (config.Pagination) {
            parentEle.parentElement.querySelector(".Pd-pagination") && parentEle.parentElement.removeChild(parentEle.parentElement.querySelector(".Pd-pagination"));
            var pager = document.createElement("div");
            pager.className = "Pd-pagination";

            for (var a = 0; a < total; a++) {
              var pageChild = document.createElement("a"),
                  textNode = childEle[a].getAttribute("data-title") ? document.createTextNode(childEle[a].getAttribute("data-title")) : document.createTextNode(a);
              pageChild.setAttribute("href", "javascript:void 0");
              if (a === current) pageChild.className = "active";
              pageChild.appendChild(textNode);
              pager.appendChild(pageChild);
            }
            parentEle.parentElement.insertBefore(pager, parentEle.nextElementSibling);

            var _loop = function _loop(_a) {
              var e = parentEle.parentElement.querySelector(".Pd-pagination").querySelectorAll("a")[_a];
              var idx = _a;
              e.onclick = function () {
                cur = idx;
                Swiper();
              };
            };

            for (var _a = 0; _a < parentEle.parentElement.querySelector(".Pd-pagination").querySelectorAll("a").length; _a++) {
              _loop(_a);
            }
          }
        };

        //上一个
        var Prev = function Prev() {
          if (cur < total && cur > 0) {
            cur--;
          } else if (cur === 0 && config.Loop) {
            cur = total - 1;
          } else {
            isScrolling = !1;
          }
          Swiper();
        };

        //下一个
        var Next = function Next() {
          if (cur < total - 1) {
            cur++;
          } else if (cur === total - 1 && config.Loop) {
            cur = 0;
          } else {
            cur = total - 1;
          }
          Swiper();
        };

        this.prev = Prev;
        this.next = Next;
        this.direct = Swiper;

        var startX = void 0,
            startY = void 0,
            endX = void 0,
            endY = void 0,
            curX = void 0,
            curY = void 0;
        //方法：滑动开始
        var touchStart = function touchStart(event) {
          if (event.target.getAttribute("data-cancel") || event.target.tagName.toUpperCase() == "A") return !1;
          event.preventDefault();
          clearTimeout(AutoTimeout);
          cancelAnimationFrame(AutoPlayFrame);
          var _event$changedTouches = event.changedTouches[0],
              pageX = _event$changedTouches.pageX,
              pageY = _event$changedTouches.pageY;

          var _parentEle$parentElem = parentEle.parentElement.getBoundingClientRect(),
              left = _parentEle$parentElem.left,
              top = _parentEle$parentElem.top;

          switch (config.Direction) {
            case "horizontal":
              startX = pageX - left;
              break;
            case "vertical":
              startY = pageY - top;
              break;
          }
          parentEle.style.transition = null;
        };

        //方法：滑动中
        var touchMove = function touchMove(event) {
          if (event.target.getAttribute("data-cancel") || event.target.tagName.toUpperCase() == "A") return !1;
          var _event$changedTouches2 = event.changedTouches[0],
              pageX = _event$changedTouches2.pageX,
              pageY = _event$changedTouches2.pageY;

          var _parentEle$parentElem2 = parentEle.parentElement.getBoundingClientRect(),
              left = _parentEle$parentElem2.left,
              top = _parentEle$parentElem2.top;

          curX = pageX - left;
          curY = pageY - top;
          switch (config.Effect) {
            case "fade":
              var _iteratorNormalCompletion7 = true;
              var _didIteratorError7 = false;
              var _iteratorError7 = undefined;

              try {
                for (var _iterator7 = childEle[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                  var _cur2 = _step7.value;
                  _cur2.style.transition = "opacity " + config.Speed + "s linear";
                }
              } catch (err) {
                _didIteratorError7 = true;
                _iteratorError7 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion7 && _iterator7.return) {
                    _iterator7.return();
                  }
                } finally {
                  if (_didIteratorError7) {
                    throw _iteratorError7;
                  }
                }
              }

              break;
            default:
              switch (config.Direction) {
                case "horizontal":
                  if (startX > curX) {
                    parentEle.style.transform = "translate3d(" + -1 * (startX - curX + childW * cur) + "px,0,0)";
                  } else {
                    parentEle.style.transform = "translate3d(" + (-1 * (childW * cur) + Math.abs(curX - startX)) + "px,0,0)";
                  }
                  break;
                case "vertical":
                  if (startY > curY) {
                    if (cur != total - 1) parentEle.style.transform = "translate3d(0," + -1 * (startY - curY + childH * cur) + "px,0)";
                  } else {
                    if (cur != 0) parentEle.style.transform = "translate3d(0," + (-1 * (childH * cur) + Math.abs(curY - startY)) + "px,0)";
                  }
                  break;
              }
              break;
          }
        };

        //方法：滑动结束
        var touchEnd = function touchEnd(event) {
          if (event.target.getAttribute("data-cancel") || event.target.tagName.toUpperCase() == "A") return !1;
          clearTimeout(AutoTimeout);
          AutoPlay();
          parentEle.style.transition = "transform " + config.Speed + "s " + config.Curve;
          var _event$changedTouches3 = event.changedTouches[0],
              pageX = _event$changedTouches3.pageX,
              pageY = _event$changedTouches3.pageY;

          var _parentEle$parentElem3 = parentEle.parentElement.getBoundingClientRect(),
              left = _parentEle$parentElem3.left,
              top = _parentEle$parentElem3.top;

          switch (config.Direction) {
            case "horizontal":
              endX = pageX - left;
              switch (config.Effect) {
                case "fade":
                  if (startX - endX > childW / config.Distance && cur === total - 1) {
                    cur = 0;
                  } else if (startX - endX > childW / config.Distance && cur < total - 1) {
                    Next();
                  } else if (endX - startX > childW / config.Distance) {
                    Prev();
                  }
                  var _iteratorNormalCompletion8 = true;
                  var _didIteratorError8 = false;
                  var _iteratorError8 = undefined;

                  try {
                    for (var _iterator8 = childEle[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                      var _cur3 = _step8.value;

                      _cur3.style.transition = "opacity " + config.Speed + "s " + config.Curve;
                      _cur3.style.opacity = 0;
                    }
                  } catch (err) {
                    _didIteratorError8 = true;
                    _iteratorError8 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion8 && _iterator8.return) {
                        _iterator8.return();
                      }
                    } finally {
                      if (_didIteratorError8) {
                        throw _iteratorError8;
                      }
                    }
                  }

                  childEle[cur].style.opacity = 1;
                  Swiper();
                  break;
                default:
                  if (startX - endX > childW / config.Distance && cur < total - 1) Next();
                  if (endX - startX > childW / config.Distance) Prev();
                  parentEle.style.transform = "translate3d(" + -1 * (childW * cur) + "px,0,0)";
                  break;
              }
              break;
            case "vertical":
              endY = pageY - top;
              switch (config.Effect) {
                case "fade":
                  if (startY - endY > childH / config.Distance && cur === total - 1) {
                    cur = 0;
                  } else if (startY - endY > childH / config.Distance && cur < total - 1) {
                    Next();
                  } else if (endY - startY > childH / config.Distance) {
                    Prev();
                  }
                  var _iteratorNormalCompletion9 = true;
                  var _didIteratorError9 = false;
                  var _iteratorError9 = undefined;

                  try {
                    for (var _iterator9 = childEle[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                      var _cur4 = _step9.value;

                      _cur4.style.transition = "opacity " + config.Speed + "s " + config.Curve;
                      _cur4.style.opacity = 0;
                    }
                  } catch (err) {
                    _didIteratorError9 = true;
                    _iteratorError9 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion9 && _iterator9.return) {
                        _iterator9.return();
                      }
                    } finally {
                      if (_didIteratorError9) {
                        throw _iteratorError9;
                      }
                    }
                  }

                  childEle[cur].style.opacity = 1;
                  Swiper();
                  break;
                default:
                  if (startY - endY > childH / config.Distance && cur < total - 1) Next();
                  if (endY - startY > childH / config.Distance) Prev();
                  parentEle.style.transform = "translate3d(0," + -1 * (childH * cur) + "px,0)";
                  break;
              }
              break;
          }
        };

        //方法：滚动中
        var scrollMove = function scrollMove(event) {
          event.preventDefault();
          if (event.deltaY > 20 && !isScrolling) {
            isScrolling = !0;
            Next();
          }
          if (event.deltaY < -20 && !isScrolling) {
            isScrolling = !0;
            Prev();
          }
        };

        //自动播放
        var AutoPlayFrame = void 0;
        var AutoPlay = function AutoPlay() {
          if (config.AutoSpeed > 0) {
            AutoTimeout = setTimeout(function () {
              Next();
              clearTimeout(AutoTimeout);
              AutoPlayFrame = requestAnimationFrame(AutoPlay);
            }, config.AutoSpeed * 1000);
          }
        };

        //初始化
        var Init = function Init() {
          var _childEle$ = childEle[0],
              offsetWidth = _childEle$.offsetWidth,
              offsetHeight = _childEle$.offsetHeight;

          childW = offsetWidth;
          childH = offsetHeight;
          cur = config.InitPage;

          new Promise(function (next) {
            switch (config.Effect) {
              case "fade":
                var _iteratorNormalCompletion10 = true;
                var _didIteratorError10 = false;
                var _iteratorError10 = undefined;

                try {
                  for (var _iterator10 = childEle[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                    var _cur5 = _step10.value;

                    _cur5.style.transition = "opacity " + config.Speed + "s " + config.Curve;
                    _cur5.style.position = "absolute";
                  }
                } catch (err) {
                  _didIteratorError10 = true;
                  _iteratorError10 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion10 && _iterator10.return) {
                      _iterator10.return();
                    }
                  } finally {
                    if (_didIteratorError10) {
                      throw _iteratorError10;
                    }
                  }
                }

                break;
              default:
                switch (config.Direction) {
                  case "horizontal":
                    parentEle.style.flexDirection = "row";
                    parentEle.style.width = childW * total + "px";
                    break;
                  case "vertical":
                    parentEle.style.flexDirection = "column";
                    parentEle.style.height = childH * total + "px";
                    break;
                }
                parentEle.style.display = "flex";
                parentEle.style.transition = "transform " + config.Speed + "s " + config.Curve;
                break;
            }
            next();
          }).then(function () {
            return new Promise(function (next) {
              //移除事件
              Swiper(config.InitPage);
              AutoPlay();
              config.Inertia && parentEle.removeEventListener("touchmove", touchMove);
              config.Scroll && parentEle.removeEventListener("mousewheel", scrollMove);
              parentEle.removeEventListener("touchstart", touchStart);
              parentEle.removeEventListener("touchend", touchEnd);
              next();
            });
          }).then(function () {
            //添加事件
            config.Inertia && parentEle.addEventListener("touchmove", touchMove);
            config.Scroll && parentEle.addEventListener("mousewheel", scrollMove);
            parentEle.addEventListener("touchstart", touchStart);
            parentEle.addEventListener("touchend", touchEnd);
            if (config.Hover) {
              parentEle.addEventListener("mouseover", function () {
                clearTimeout(AutoTimeout);
                cancelAnimationFrame(AutoPlayFrame);
              });
              parentEle.addEventListener("mouseout", AutoPlay);
            }
          });
        };

        Init();
        var req = void 0;
        window.addEventListener("resize", function () {
          cancelAnimationFrame(req);
          req = requestAnimationFrame(Init);
        });
        return this;
      }
      //字体自适应

    }, {
      key: "AutoSize",
      value: function AutoSize(options) {
        var _this4 = this;

        var config = {
          //固定尺寸(类型：字符串)
          PageSize: "device-width",
          //初始缩放(类型：数字)
          InitScale: 1,
          //最小缩放(类型：数字)
          MinScale: 1,
          //最大缩放(类型：数字)
          MaxScale: 1,
          //DPI缩放(类型：数字)
          Ratio: 1
        };
        config = this.extend(config, options);
        var meta = document.createElement("meta");
        meta.setAttribute("name", "viewport");
        if (typeof config.PageSize !== "number") {
          meta.setAttribute("content", "width=" + config.PageSize + ",initial-scale=" + config.InitScale + ",minimum-scale=" + config.MinScale + ",maximum-scale=" + config.MaxScale + ",user-scalable=no,viewport-fit=cover");
        } else {
          meta.setAttribute("content", "width=" + config.PageSize + ",user-scalable=no,viewport-fit=cover");
        }
        new PandoraAPI("head").get.appendChild(meta);

        var SetSize = function SetSize() {
          var platform = navigator.userAgent.toLowerCase(),
              deviceList = ["iphone", "android"],
              isMobile = !1;

          deviceList.forEach(function (c) {
            if (isMobile) return !1;
            if (platform.indexOf(c) > 0 && config.PageSize !== "device-width") {
              isMobile = !0;
              var calcFontSize = window.screen.width / 3.75 * config.Ratio;
              _this4.css({ "font-size": calcFontSize + "px" });
            } else {
              isMobile = !1;
              _this4.css({ "font-size": _this4.css("font-size") });
            }
            _this4.attr("ismobile", isMobile);
          });
        };
        SetSize();
        window.onresize = SetSize;
        return this;
      }
      //自定义弹框

    }, {
      key: "Dialog",
      value: function Dialog(options) {
        var _this5 = this;

        var config = {
          //是否显示遮罩
          mask: !0,
          //遮罩颜色(类型：字符串)
          maskColor: "rgba(0,0,0,.85)",
          //点击遮罩退出(类型：布尔)
          maskOut: !0,
          //过渡速度/毫秒(类型：数字)
          Speed: 180,
          //过渡曲线(类型：字符串；参考CSS3可用曲线)
          Curve: "ease-out",
          //进出方式(类型：字符串；none:无、zoom:缩放、top:从屏幕上方出现、bottom:从屏幕下方出现)
          Direction: "zoom",
          //进入事件(类型：方法)
          In: null,
          //退出事件(类型：方法)
          Out: null,
          //确认事件
          Confirm: {
            //确定按钮(类型：字符串)
            btn: null,
            //回调(类型：方法；返回类型：对象)
            callback: null
          },
          //取消事件
          Cancel: {
            //取消按钮(类型：字符串)
            btn: null,
            //回调(类型：方法；返回类型：对象)
            callback: null
          }
        };
        config = this.extend(config, options);
        var mask = document.createElement("div"),
            parent = this.get.parentElement;
        mask.className = "Pd-Mask";
        var confirmBtn = config.Confirm.btn ? new PandoraAPI(config.Confirm.btn) : null,
            cancelBtn = config.Cancel.btn ? new PandoraAPI(config.Cancel.btn) : null;

        if (config.Direction !== "none") this.css({ transition: "all " + config.Speed + "ms " + config.Curve });

        //关闭弹框
        var closeDialog = function closeDialog() {
          Effect("out");
          if (config.Direction === "none") {
            config.mask && parent.removeChild(mask);
            _this5.css({ display: "none" });
            _this5.unbind("transitionend");
          } else {
            _this5.bind("transitionend", function () {
              config.mask && parent.removeChild(mask);
              _this5.css({ display: "none" });
              _this5.unbind("transitionend");
            });
          }
          config.Confirm.btn && confirmBtn.unbind("click");
          config.Cancel.btn && cancelBtn.unbind("click");
          window.onresize = null;
        };

        //进入和退出效果
        var Effect = function Effect(where) {
          if (config.mask) {
            parent.insertBefore(mask, _this5.get.nextElementSibling);
            new PandoraAPI(".Pd-Mask").css({
              width: "100vw",
              height: "100vh",
              background: config.maskColor,
              position: "fixed",
              top: 0,
              left: 0,
              "z-index": 998
            });
          }

          switch (where) {
            case "in":
              _this5.css({ display: "block" });
              switch (config.Direction) {
                case "zoom":
                  _this5.css({ transform: "translate3d(0,0,0) scale(0)" });
                  break;
                case "top":
                  _this5.css({ transform: "translate3d(0,-100%,0)" });
                  break;
                case "bottom":
                  _this5.css({ transform: "translate3d(0,100%,0)" });
                  break;
              }
              config.In && config.In();
              break;
            case "out":
              switch (config.Direction) {
                case "none":
                  _this5.css({ display: "none" });
                  break;
                case "zoom":
                  _this5.css({ transform: "translate3d(0,0,0) scale(0)" });
                  break;
                case "top":
                  _this5.css({ transform: "translate3d(0,-100%,0)" });
                  break;
                case "bottom":
                  _this5.css({ transform: "translate3d(0,100%,0)" });
                  break;
              }
              config.Out && config.Out();
              break;
          }
        };

        var openDialog = function openDialog(param) {
          new Promise(function (next) {
            Effect("in");
            next();
          }).then(function () {
            return new Promise(function (next) {
              var calcDialog = function calcDialog() {
                var top = parseInt(_this5.css("height")) / 2,
                    left = parseInt(_this5.css("width")) / 2;
                switch (config.Direction) {
                  case "none":
                    _this5.css({
                      position: "fixed",
                      top: "calc(50% - " + top + "px)",
                      left: "calc(50% - " + left + "px)",
                      "z-index": 999,
                      transform: "translate3d(0,0,0) scale(1)"
                    });
                    break;
                  case "zoom":
                    _this5.css({
                      position: "fixed",
                      top: "calc(50% - " + top + "px)",
                      left: "calc(50% - " + left + "px)",
                      "z-index": 999,
                      transform: "translate3d(0,0,0) scale(1)"
                    });
                    break;
                  case "top":
                    _this5.css({
                      position: "fixed",
                      top: 0,
                      left: "calc(50% - " + left + "px)",
                      "z-index": 999,
                      transform: "translate3d(0,0,0) scale(1)"
                    });
                    break;
                  case "bottom":
                    _this5.css({
                      position: "fixed",
                      bottom: 0,
                      left: "calc(50% - " + left + "px)",
                      "z-index": 999,
                      transform: "translate3d(0,0,0) scale(1)"
                    });
                    break;
                }
              };
              calcDialog();
              window.onresize = function () {
                _this5.ontransition(calcDialog);
              };
              next();
            });
          }).then(function () {
            //遮罩被点击
            if (config.mask && config.maskOut) mask.onclick = closeDialog;
            var close = _this5.close;
            //确认按钮被点击

            config.Confirm.btn && confirmBtn.bind("click", function () {
              config.Confirm.callback({ param: param ? param : null, close: close });
            });
            //取消按钮被点击
            config.Cancel.btn && cancelBtn.bind("click", function () {
              config.Cancel.callback({ param: param ? param : null, close: close });
            });
          });
        };

        this.close = closeDialog;
        this.open = openDialog;
        return this;
      }
      //图片预加载

    }, {
      key: "ImgLoader",
      value: function ImgLoader(options) {
        var _this6 = this;

        var config = {
          //缓步(类型：布尔)
          lazy: !0,
          //加载中(类型：方法；返回类型：数字)
          loading: null,
          //加载完成(类型：方法)
          callback: null,
          //加载错误(类型：方法)
          error: function error() {
            console.error("资源加载错误");
            alert("资源加载错误");
          }
        };
        config = this.extend(config, options);
        var $ = this.getEle("*"),
            pattern = new RegExp('".*?"', "g"),
            pattern2 = new RegExp(/'.*?'/, "g"),
            pattern3 = new RegExp(/\(.*?\)/, "g");
        var ImgArr = [],
            total = 0,
            cur = 0,
            step = 0,
            floatNum = 0;

        var _iteratorNormalCompletion11 = true;
        var _didIteratorError11 = false;
        var _iteratorError11 = undefined;

        try {
          for (var _iterator11 = $[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
            var e = _step11.value;

            if (e.nodeName.toLowerCase() == "img") e.src && ImgArr.push(e.src);
            var getBg = window.getComputedStyle(e).getPropertyValue("background-image");
            if (getBg.indexOf("url") > -1 && getBg != "none") {
              var url1 = getBg.match(pattern),
                  url2 = getBg.match(pattern2),
                  url3 = getBg.match(pattern3);

              if (url1) ImgArr.push(url1[0].toString().replace(/"/g, ""));
              if (url2) ImgArr.push(url2[0].toString().replace(/'/g, ""));
              if (url3) {
                var src = url3[0].toString().replace(/\(/, "");
                src = src.replace(/\)/, "");
                if (src.match(pattern)) src = src.match(pattern)[0].toString().replace(/"/g, "");
                if (src.match(pattern2)) src = src.match(pattern2)[0].toString().replace(/'/g, "");
                ImgArr.push(src);
              }
            }
          }
        } catch (err) {
          _didIteratorError11 = true;
          _iteratorError11 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion11 && _iterator11.return) {
              _iterator11.return();
            }
          } finally {
            if (_didIteratorError11) {
              throw _iteratorError11;
            }
          }
        }

        var loaderList = [];
        total = ImgArr.length;

        var loader = function loader(src) {
          return new Promise(function (success, fail) {
            var img = new Image();
            img.src = src;

            img.onerror = fail;

            if (img.complete) {
              cur++;
              success();
            } else {
              img.onload = function () {
                cur++;
                success();
              };
            }
          });
        };

        ImgArr.map(function (e) {
          loaderList.push(loader(e));
        });

        //加载中
        var loadingFrame = void 0,
            loadstepFrame = void 0;

        Promise.all(loaderList).then(function () {
          !config.lazy && config.callback && config.callback();
        }).catch(function () {
          config.error();
          cancelAnimationFrame(loadingFrame);
          cancelAnimationFrame(loadstepFrame);
        });

        var loading = function loading() {
          step = cur / total * 100;
          if (step < 100) {
            if (step === 100) {
              cancelAnimationFrame(loadingFrame);
            } else {
              loadingFrame = requestAnimationFrame(loading);
            }
          }
        };
        var loadstep = function loadstep() {
          if (floatNum < 100) {
            if (floatNum < step) floatNum++;
            _this6.attr("Pd-load", floatNum);
            config.loading && config.loading(floatNum);
            if (floatNum === 100) {
              cancelAnimationFrame(loadstepFrame);
              config.lazy && config.callback && config.callback();
            } else {
              loadstepFrame = requestAnimationFrame(loadstep);
            }
          }
        };
        loading();
        loadstep();
        return this;
      }
      //图片上传

    }, {
      key: "ImgUpload",
      value: function ImgUpload(options) {
        var _this7 = this;

        var config = {
          //接口地址(类型：字符串)
          apiUrl: "//node.pandorastudio.cn/",
          //接口名称(类型：字符串)
          apiName: "Pd_uploadImage",
          //格式限制(类型：字符串)
          Format: "*",
          //选择类型(可选参数：defualt、camera)
          type: "default",
          //限制数量(类型：数字)
          Max: 1,
          //压缩比例(类型：数字)
          Quality: 100,
          //尺寸裁切
          Clip: {
            //宽度(类型：数字)
            width: null,
            //高度(类型：数字)
            height: null
          },
          //上传事件
          Events: {
            //超过限制(类型：方法)
            overMax: null,
            //开始上传(类型：方法)
            ready: null,
            //上传成功(类型：方法；返回类型：对象)
            success: null,
            //失败(类型：方法)
            fail: null
          },
          //唯一id(类型：字符串；如果为null，则启用临时上传，请谨慎使用)
          Uid: null
        };
        config = this.extend(config, options);
        var innerHtml = this.html();
        this.empty();
        this.get.insertAdjacentHTML("afterbegin", "<label for=\"Pd_imgupload_" + this.pid + "\" style=\"width:100%;height:100%;display:block;\"></label>");
        var uploadBtn = document.createElement("input"),
            userId = void 0,
            total = config.Max,
            current = 0,
            steps = current / total * 100;
        if (config.Uid) {
          userId = config.Uid;
        } else {
          userId = document.domain + "_" + this.pid;
        }

        uploadBtn.type = "file";
        uploadBtn.accept = "image/" + config.Format;
        uploadBtn.id = "Pd_imgupload_" + this.pid;
        if (config.type === "camera") uploadBtn.setAttribute("capture", "camera");
        uploadBtn.style.display = "none";
        if (config.Max > 1) uploadBtn.multiple = !0;
        this.get.querySelector("label").innerHTML = innerHtml;
        this.get.querySelector("label").append(uploadBtn);

        //上传图片
        var uploadPreview = function uploadPreview(obj) {
          var formData = new FormData();
          formData.append("images", obj);
          formData.append("uid", userId);
          formData.append("width", config.Clip.width);
          formData.append("height", config.Clip.height);
          formData.append("quality", config.Quality);

          if (config.Events.ready) {
            config.Events.ready();
          } else {
            !config.Events.ready && window.showLoading();
          }

          _this7.ajax({
            url: "" + config.apiUrl + config.apiName,
            async: !0,
            type: "post",
            dataType: "form",
            data: formData,
            success: function success(res) {
              current++;
              steps = current / total * 100;
              uploadBtn.setAttribute("data-progress", steps);
              if (steps === 100) {
                uploadBtn.disabled = !1;
                var data = { src: res.images };
                uploadBtn.value = "";
                !config.Events.ready && window.hideLoading();
                config.Events.success && config.Events.success(data);
              }
            },
            error: function error() {
              uploadBtn.disabled = !1;
              uploadBtn.value = "";
              !config.Events.ready && window.hideLoading();
              config.Events.fail && config.Events.fail();
            }
          });
        };

        //获取选择文件
        var selectedFile = function selectedFile(Files) {
          var files = Array.prototype.slice.call(Files);
          if (config.Max === 0 || files.length <= config.Max) {
            current = 0;
            uploadBtn.disabled = !0;
            total = files.length;

            if (total > 0) {
              files.forEach(function (file, idx) {
                uploadPreview(Files[idx]);
              });
            }
          } else {
            config.Events.overMax && config.Events.overMax();
            console.info("\u6587\u4EF6\u6570\u91CF\u8D85\u8FC7\u6700\u5927\u6570\u91CF:" + config.Max);
          }
        };

        //选择文件按钮事件
        uploadBtn.addEventListener("change", function (event) {
          event.preventDefault();
          selectedFile(event.target.files);
        });
        //拖动文件事件
        this.bind("dragover", function (event) {
          event.preventDefault();
        });
        this.bind("drop", function (event) {
          event.preventDefault();
          selectedFile(event.dataTransfer.files);
        });
        return this;
      }
      //图片移动缩放

    }, {
      key: "ImgTransit",
      value: function ImgTransit(options) {
        var _this8 = this;

        var config = {
          //显示控制图标(类型：布尔)
          icon: !0,
          //控制图标大小(类型：数字)
          iconSize: 40,
          //显示边框(类型：布尔)
          border: !0,
          //内边距(类型：数字)
          padding: 0,
          //缩放
          scale: {
            //是否启用(类型：布尔)
            enable: !0,
            //最小(类型：数字)
            min: 50,
            //最大(类型：数字)
            max: 200,
            //速率(类型：数字)
            rate: 1
          },
          //是否移动(类型：布尔)
          move: !0,
          //旋转
          rotate: {
            //是否启用(类型：布尔)
            enable: !0,
            //速率(类型：数字)
            rate: 1
          },
          //是否启用删除(类型：布尔)
          delete: !0,
          //边界限制(类型：布尔)
          bounds: !0,
          //边界可超出范围(类型：数字)
          outBounds: 0,
          //操作回调方法(类型：方法；返回类型：对象)
          callback: null
        };
        config = this.extend(config, options);
        var imgRealArr = this.get.querySelectorAll("img"),
            beforImgArr = Array.prototype.slice.call(imgRealArr),
            imgArr = [],
            imgIndex = [],
            btnAnimation = "transition:opacity .2s ease-in",
            topIndex = void 0,
            canMove = !0;

        this.css({
          position: "relative"
        });

        beforImgArr.forEach(function (cur, idx) {
          if (JSON.parse(cur.getAttribute("Pd-move"))) {
            imgIndex.push(idx);
            imgArr.push(cur);
          }
        });
        topIndex = imgArr.length;

        //图标配置
        var iconStyle = function iconStyle(option) {
          var posicfg = { top: null, left: null, right: null, bottom: null, name: null };
          posicfg = _this8.extend(posicfg, option);
          return "<a class=\"Pd-ImgTransit-btn Pd-" + posicfg.name + "\" style=\"width:" + config.iconSize + "px;height:" + config.iconSize + "px;background:#fff url('//b.pandorajs.com/Pandora/Pandora/src/" + posicfg.name + ".svg');background-position:center;background-repeat:no-repeat;background-size:65%;position:absolute;border-radius:50%;top:" + posicfg.top + "px;left:" + posicfg.left + "px;right:" + posicfg.right + "px;bottom:" + posicfg.bottom + "px;z-index:2;" + btnAnimation + "\" href=\"javascript:void 0\"></a>";
        };

        var icon = {
          resize: iconStyle({ left: "-" + config.iconSize / 2, bottom: "-" + config.iconSize / 2, name: "resize" }),
          rotate: iconStyle({ right: "-" + config.iconSize / 2, top: "-" + config.iconSize / 2, name: "rotate" }),
          delete: iconStyle({ left: "-" + config.iconSize / 2, top: "-" + config.iconSize / 2, name: "delete" })
        };

        //删除原始元素
        var deletDefault = function deletDefault() {
          var imgRealArr = _this8.get.querySelectorAll("img"),
              imgArr = Array.prototype.slice.call(imgRealArr);
          imgArr.forEach(function (cur, idx) {
            var current = imgRealArr[idx];
            JSON.parse(current.getAttribute("Pd-move")) && current.parentElement.removeChild(current);
          });
        };

        //设置参数
        var setConfig = function setConfig(ele, eleconfig) {
          var _iteratorNormalCompletion12 = true;
          var _didIteratorError12 = false;
          var _iteratorError12 = undefined;

          try {
            for (var _iterator12 = ele.querySelectorAll(".Pd-ImgTransit-btn")[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
              var a = _step12.value;
              a.style.transform = "scale(" + 1 / (eleconfig.scale / 100) + ") rotate(" + -1 * eleconfig.rotate + "deg)";
            }
          } catch (err) {
            _didIteratorError12 = true;
            _iteratorError12 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion12 && _iterator12.return) {
                _iterator12.return();
              }
            } finally {
              if (_didIteratorError12) {
                throw _iteratorError12;
              }
            }
          }

          return ele.style.transform = "translate3d(" + eleconfig.translate + ") scale(" + eleconfig.scale / 100 + ") rotate(" + eleconfig.rotate + "deg)";
        };

        //获取中心
        var getCenterPoint = function getCenterPoint(ele) {
          return { x: ele.getBoundingClientRect().left + ele.offsetWidth / 2, y: ele.getBoundingClientRect().top + ele.offsetHeight / 2 };
        };

        //添加容器事件
        var addEvent = function addEvent(ele) {
          var eleReal = _this8.get.querySelectorAll(".Pd-ImgTransit"),
              eleArr = Array.prototype.slice.call(eleReal),
              eleConfig = [];

          eleArr.forEach(function (cur, idx) {
            var w = ele[idx].width,
                h = ele[idx].height;
            eleConfig.push({ translate: "0,0,0", scale: 100, rotate: 0 });
            eleReal[idx].style.width = w + "px";
            eleReal[idx].style.height = h + "px";
            setConfig(eleReal[idx], eleConfig[idx]);
            eleReal[idx].style.position = "absolute";
            eleReal[idx].style.top = "50%";
            eleReal[idx].style.left = "50%";
            eleReal[idx].style.margin = "-" + (h / 2 + config.padding) + "px 0 0 -" + (w / 2 + config.padding) + "px";
            eleReal[idx].style.zIndex = idx + 1;
            eleReal[idx].style.padding = config.padding + "px";

            var touchStart = void 0,
                touchEnd = void 0,
                touchMove = void 0,
                touchResize = void 0,
                touchRotate = void 0,
                touchDelete = void 0,
                centerPoint = void 0,
                prevAngle = void 0,
                touchX = 0,
                touchY = 0,
                startX = void 0,
                startY = void 0,
                prevScale = void 0;

            touchStart = function touchStart(event) {
              event.preventDefault();
              if (JSON.parse(event.target.getAttribute("pd-move")) || JSON.parse(event.target.parentElement.getAttribute("pd-move"))) eleReal[idx].querySelector("img").style.transform = "scale(1.04)";
              config.callback && config.callback({
                type: "choose",
                obj: eleReal[idx]
              });
            };
            touchEnd = function touchEnd(event) {
              event.preventDefault();
              eleReal[idx].querySelector("img").style.transform = "scale(1)";
            };
            //移动事件
            touchMove = function touchMove(event) {
              if (event.touches.length < 2) {
                event.stopImmediatePropagation();
                event.preventDefault();
                var changePosition = function changePosition() {
                  var nowx = event.changedTouches[0].pageX,
                      nowy = event.changedTouches[0].pageY,
                      w = event.target.getBoundingClientRect().width,
                      h = event.target.getBoundingClientRect().height,
                      icon = event.target.parentElement.querySelectorAll(".Pd-ImgTransit-btn")[0].getBoundingClientRect(),
                      iconw = icon.width / 2;
                  touchX = nowx - startX;
                  touchY = nowy - startY;
                  var getBounding = eleReal[idx].parentElement.getBoundingClientRect(),
                      parentBox = {
                    width: config.bounds ? getBounding.width + config.outBounds : getBounding.width,
                    height: config.bounds ? getBounding.height + config.outBounds : getBounding.height
                  };

                  if (config.bounds) {
                    if (Math.abs(touchX) >= parentBox.width / 2 - w / 2 - iconw) {
                      if (touchX < 0) {
                        touchX = -1 * (parentBox.width / 2 - w / 2 - iconw);
                      } else {
                        touchX = parentBox.width / 2 - w / 2 - iconw;
                      }
                    }
                    if (Math.abs(touchY) >= parentBox.height / 2 - h / 2 - iconw) {
                      if (touchY < 0) {
                        touchY = -1 * (parentBox.height / 2 - h / 2 - iconw);
                      } else {
                        touchY = parentBox.height / 2 - h / 2 - iconw;
                      }
                    }
                  }
                  eleConfig[idx].translate = touchX + "px," + touchY + "px,0";
                  setConfig(eleReal[idx], eleConfig[idx]);
                };
                config.callback && config.callback({ type: "move", obj: eleReal[idx] });
                canMove && changePosition();
              }
            };
            //缩放事件
            touchResize = function touchResize(event) {
              event.stopImmediatePropagation();
              event.preventDefault();
              if (canMove) {
                var x = event.changedTouches[0].pageX - eleReal[idx].getBoundingClientRect().left;
                if (x > 0 && eleConfig[idx].scale > config.scale.min) {
                  eleConfig[idx].scale -= config.scale.rate;
                }
                if (x < 0 && eleConfig[idx].scale < config.scale.max) {
                  eleConfig[idx].scale += config.scale.rate;
                }
              }

              if (event.touches.length >= 2) {
                if (config.scale.enable) {
                  if (event.scale > prevScale) {
                    if (eleConfig[idx].scale < config.scale.max) eleConfig[idx].scale += event.scale;
                  } else {
                    if (eleConfig[idx].scale > config.scale.min) eleConfig[idx].scale -= event.scale * 10;
                  }
                }

                if (config.rotate.enable) {
                  if (event.rotation > 0) {
                    eleConfig[idx].rotate += Math.abs(event.rotation) / 30;
                  } else {
                    eleConfig[idx].rotate -= Math.abs(event.rotation) / 30;
                  }
                }
              }
              setConfig(eleReal[idx], eleConfig[idx]);
              config.callback && config.callback({ type: "resize", obj: eleReal[idx] });
            };
            //旋转事件
            touchRotate = function touchRotate(event) {
              event.stopImmediatePropagation();
              event.preventDefault();
              var changeRotate = function changeRotate() {
                var angle = Math.atan2(event.changedTouches[0].pageY - centerPoint.y, event.changedTouches[0].pageX - centerPoint.x);
                eleConfig[idx].rotate = Math.floor((angle - prevAngle) * 180 / Math.PI) * config.rotate.rate;
                setConfig(eleReal[idx], eleConfig[idx]);
              };
              config.callback && config.callback({ type: "rotate", obj: eleReal[idx] });
              canMove && changeRotate();
            };
            //删除事件
            touchDelete = function touchDelete(event) {
              event.stopImmediatePropagation();
              event.preventDefault();
              var deleteObj = function deleteObj() {
                eleConfig[idx].translate = "0,0,0";
                eleConfig[idx].rotate = 0;
                eleConfig[idx].scale = 100;
                setConfig(eleReal[idx], eleConfig[idx]);
                eleReal[idx].style.display = "none";
                config.callback && config.callback({ type: "delete", obj: eleReal[idx] });
              };
              canMove && deleteObj();
            };
            //绑定所有操作
            eleReal[idx].addEventListener("touchstart", touchStart);
            eleReal[idx].addEventListener("touchend", touchEnd);
            if (config.move) {
              eleReal[idx].addEventListener("touchstart", function (event) {
                if (event.touches.length < 2) {
                  startX = event.changedTouches[0].pageX - touchX;
                  startY = event.changedTouches[0].pageY - touchY;
                  eleReal[idx].addEventListener("touchmove", touchMove);
                }
              });
            }
            if (config.icon && config.scale.enable) eleReal[idx].querySelectorAll(".Pd-resize")[0].addEventListener("touchmove", touchResize);
            if (config.icon && config.rotate.enable) {
              eleReal[idx].querySelectorAll(".Pd-rotate")[0].addEventListener("touchstart", function (event) {
                centerPoint = getCenterPoint(eleReal[idx]);
                prevAngle = Math.atan2(event.changedTouches[0].pageY - centerPoint.y, event.changedTouches[0].pageX - centerPoint.x) - eleConfig[idx].rotate * Math.PI / 180;
              });
              eleReal[idx].querySelectorAll(".Pd-rotate")[0].addEventListener("touchmove", touchRotate);
            }
            if (config.icon && config.delete) eleReal[idx].querySelectorAll(".Pd-delete")[0].addEventListener("touchstart", touchDelete);

            //隐藏操作按钮
            var hideBtn = function hideBtn() {
              canMove = !1;
              var allCon = document.querySelectorAll(".Pd-ImgTransit"),
                  allBtn = document.querySelectorAll(".Pd-ImgTransit-btn");
              var _iteratorNormalCompletion13 = true;
              var _didIteratorError13 = false;
              var _iteratorError13 = undefined;

              try {
                for (var _iterator13 = allCon[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
                  var a = _step13.value;
                  a.style.border = "none";
                }
              } catch (err) {
                _didIteratorError13 = true;
                _iteratorError13 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion13 && _iterator13.return) {
                    _iterator13.return();
                  }
                } finally {
                  if (_didIteratorError13) {
                    throw _iteratorError13;
                  }
                }
              }

              var _iteratorNormalCompletion14 = true;
              var _didIteratorError14 = false;
              var _iteratorError14 = undefined;

              try {
                for (var _iterator14 = allBtn[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
                  var _a2 = _step14.value;
                  _a2.style.opacity = 0;
                }
              } catch (err) {
                _didIteratorError14 = true;
                _iteratorError14 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion14 && _iterator14.return) {
                    _iterator14.return();
                  }
                } finally {
                  if (_didIteratorError14) {
                    throw _iteratorError14;
                  }
                }
              }
            };
            config.icon && hideBtn();

            //显示操作按钮
            var showBtn = function showBtn(tag) {
              canMove = !0;
              var curBtn = tag.querySelectorAll(".Pd-ImgTransit-btn");
              var _iteratorNormalCompletion15 = true;
              var _didIteratorError15 = false;
              var _iteratorError15 = undefined;

              try {
                for (var _iterator15 = curBtn[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
                  var a = _step15.value;

                  a.style.opacity = 1;
                  if (config.border) tag.style.border = "2px dashed white";
                  topIndex++;
                  tag.style.zIndex = topIndex;
                }
              } catch (err) {
                _didIteratorError15 = true;
                _iteratorError15 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion15 && _iterator15.return) {
                    _iterator15.return();
                  }
                } finally {
                  if (_didIteratorError15) {
                    throw _iteratorError15;
                  }
                }
              }
            };

            //显示当前按钮
            document.addEventListener("touchstart", function (event) {
              if (config.icon) {
                hideBtn();
                event.stopImmediatePropagation();
                JSON.parse(event.target.getAttribute("pd-move")) && showBtn(event.target);
                if (event.target.parentElement) JSON.parse(event.target.parentElement.getAttribute("pd-move")) && showBtn(event.target.parentElement);
              } else {
                if (event.target.parentElement) {
                  if (JSON.parse(event.target.parentElement.getAttribute("pd-move"))) {
                    canMove = !0;
                  } else {
                    canMove = !1;
                  }
                }
              }
            });
          });
        };

        new Promise(function (next) {
          var eleArr = [];
          imgArr.forEach(function (current, idx) {
            var cur = imgRealArr[imgIndex[idx]],
                btn = "";
            if (config.icon) {
              config.scale.enable && (btn += icon.resize);
              config.rotate.enable && (btn += icon.rotate);
              config.delete && (btn += icon.delete);
            }
            _this8.append("<div class=\"Pd-ImgTransit\" Pd-index=\"" + imgIndex[idx] + "\">" + btn + "</div>");
            var imgCon = _this8.get.querySelectorAll(".Pd-ImgTransit")[idx];
            cur.style.transition = "transform .4s ease-in";
            [].slice.call(cur.attributes).forEach(function (atts) {
              if (atts.name !== "style" && atts.name !== "id" && atts.name !== "class") imgCon.setAttribute(atts.name, atts.value);
            });
            imgCon.appendChild(cur);
            cur.removeAttribute("Pd-move");
            eleArr.push(cur);
            next(eleArr);
          });
        }).then(function (ele) {
          deletDefault();
          addEvent(ele);
        });
      }
      //微信SDK

    }, {
      key: "wxSDK",
      value: function wxSDK(options) {
        var _this9 = this;

        var config = {
          //相关接口地址(类型：字符串)
          apiUrl: "//wx.pandorajs.com/wxshare.ashx?url=",
          //分享标题(类型：字符串或数组)
          title: ["Share to Timeline", "Share to Friends"],
          //分享描述(类型：字符串)
          desc: "Simple for this",
          //分享图(类型：字符串或数组)
          sharepics: "//pandorajs.com/share_ico.jpg",
          //分享链接(类型：字符串或数组)
          sharelinks: location.href,
          //调试(类型：布尔)
          debug: !1,
          //微信jsApiList(类型：数组)
          jsApiList: null,
          //回调方法
          callback: {
            //分享就绪(类型：方法)
            ready: null,
            //分享成功(类型：方法)
            success: null,
            //分享失败或取消(类型：方法)
            error: null
          }
        };
        config = this.extend(config, options);
        var sdk = "//pandorajs.com/other/weixin.js";
        if (location.protocol === "file:") sdk = "//pandorajs.com/other/weixin.js";
        var scriptTag = document.createElement("script");
        scriptTag.id = "Pd_share";
        scriptTag.src = sdk;
        if (this.getEle("#Pd_share")) {
          new PandoraAPI("#Pd_share").remove();
          document.body.appendChild(scriptTag);
        } else {
          document.body.appendChild(scriptTag);
        }
        var jsApiList = ["onMenuShareTimeline", "onMenuShareAppMessage", "updateTimelineShareData", "updateAppMessageShareData"];
        if (config.jsApiList) {
          config.jsApiList.map(function (e) {
            jsApiList.push(e);
          });
        }

        var isObj = function isObj(con) {
          if ((typeof con === "undefined" ? "undefined" : _typeof(con)) === "object") {
            return !0;
          } else {
            return !1;
          }
        };

        var success = function success(res) {
          var debug = res.debug,
              appId = res.appId,
              timestamp = res.timestamp,
              nonceStr = res.nonceStr,
              signature = res.signature,
              jsApiList = res.jsApiList;

          wx.config({ debug: debug, appId: appId, timestamp: timestamp, nonceStr: nonceStr, signature: signature, jsApiList: jsApiList });
          wx.ready(function () {
            new Promise(function (next) {
              var timeLine = {
                title: isObj(config.title) ? config.title[0] : config.title,
                link: isObj(config.sharelinks) ? config.sharelinks[0] : config.sharelinks,
                imgUrl: isObj(config.sharepics) ? config.sharepics[0] : config.sharepics
              },
                  friend = {
                title: isObj(config.title) ? config.title[1] : config.title,
                link: isObj(config.sharelinks) ? config.sharelinks[1] : config.sharelinks,
                imgUrl: isObj(config.sharepics) ? config.sharepics[1] : config.sharepics
              };

              if (wx.onMenuShareTimeline) {
                var title = timeLine.title,
                    link = timeLine.link,
                    imgUrl = timeLine.imgUrl;

                wx.onMenuShareTimeline({ title: title, link: link, imgUrl: imgUrl, success: config.callback.success, cancel: config.callback.error });
              } else {
                var _title = timeLine.title,
                    _link = timeLine.link,
                    _imgUrl = timeLine.imgUrl;

                wx.updateTimelineShareData({ title: _title, link: _link, imgUrl: _imgUrl, success: config.callback.success, cancel: config.callback.error });
              }

              if (wx.onMenuShareAppMessage) {
                var _title2 = friend.title,
                    _link2 = friend.link,
                    _imgUrl2 = friend.imgUrl;

                wx.onMenuShareAppMessage({ title: _title2, desc: config.desc, link: _link2, imgUrl: _imgUrl2, success: config.callback.success, cancel: config.callback.error });
              } else {
                var _title3 = friend.title,
                    _link3 = friend.link,
                    _imgUrl3 = friend.imgUrl;

                wx.updateAppMessageShareData({ title: _title3, desc: desc, link: _link3, imgUrl: _imgUrl3, success: config.callback.success, cancel: config.callback.error });
              }
              next();
            }).then(config.callback.ready);
          });
        };

        scriptTag.onload = function () {
          _this9.fetch({
            url: "" + config.apiUrl + encodeURIComponent(location.href),
            type: "post",
            success: success
          });
        };
        return this;
      }
      //懒加载

    }, {
      key: "LazyLoad",
      value: function LazyLoad(options) {
        var config = {
          //缺省尺寸
          width: 100,
          height: 100
        };
        config = this.extend(config, options);

        var imgArr = this.child("img").get;
        var cur = 0;
        var lazyArr = [];
        //遍历所有图片
        var _iteratorNormalCompletion16 = true;
        var _didIteratorError16 = false;
        var _iteratorError16 = undefined;

        try {
          for (var _iterator16 = imgArr[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
            var img = _step16.value;

            if (img.dataset.src) {
              img.width = config.width;
              img.height = config.height;
              lazyArr.push(img);
            }
          }

          //进入视图
        } catch (err) {
          _didIteratorError16 = true;
          _iteratorError16 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion16 && _iterator16.return) {
              _iterator16.return();
            }
          } finally {
            if (_didIteratorError16) {
              throw _iteratorError16;
            }
          }
        }

        var inView = function inView(obj) {
          if (obj.getBoundingClientRect().y - window.innerHeight < 0) return obj;
          return !1;
        };

        //检测图片状态
        var checker = function checker() {
          lazyArr.forEach(function (img) {
            if (inView(img) && !img.src && img.complete) {
              img.src = inView(img).dataset.src;
              img.onload = function () {
                img.width = img.dataset.width ? img.dataset.width : img.naturalWidth;
                img.height = img.dataset.height ? img.dataset.height : img.naturalHeight;
                img.removeAttribute("data-src");
                img.dataset.width && img.removeAttribute("data-width");
                img.dataset.height && img.removeAttribute("data-height");
                cur++;
                if (cur == lazyArr.length) window.removeEventListener("scroll", checker);
              };

              img.onerror = function () {
                console.error("\u4EE5\u4E0B\u8D44\u6E90\u53D1\u751F\u9519\u8BEF\uFF1A" + img.src);
                cur++;
              };
            }
          });
        };

        //页面滚动事件
        window.addEventListener("scroll", checker);
      }
    }]);

    return _class;
  }(SuperClass);
};

var Pandora = function (_PandoraJs) {
  _inherits(Pandora, _PandoraJs);

  function Pandora(element) {
    _classCallCheck(this, Pandora);

    return _possibleConstructorReturn(this, (Pandora.__proto__ || Object.getPrototypeOf(Pandora)).call(this, element));
  }

  return Pandora;
}(PandoraJs(PandoraAPI));

try {
  jQuery;
} catch (err) {
  //是否使用缩写
  var isUsing = !1;
  new Promise(function (next) {
    window.$ = function (element) {
      isUsing = !0;
      next();
      return new Pandora(element);
    };
  }).then(function () {
    !isUsing && console.warn("new Pandora() 可以简写为 $()");
  });
}
